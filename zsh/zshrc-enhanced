# Modern ZSH Configuration - Reddit Community Favorites Edition
# ============================================================
# Based on the most upvoted configs from r/unixporn, r/zsh, r/tmux, r/commandline

# Colors for terminal
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export RED='\033[0;31m'
export BLUE='\033[0;34m'
export NC='\033[0m' # No Color

# Essential Environment Variables
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export EDITOR='vim'
export VISUAL='vim'

# Path configuration
export PATH="$HOME/.pyenv/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

# macOS-specific paths
if [[ "$OSTYPE" == "darwin"* ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
    export PATH="/opt/homebrew/sbin:$PATH"
    export PATH="$PATH:$HOME/.lmstudio/bin"
    export PATH="$PATH:$HOME/.codeium/windsurf/bin"
    export PATH="/opt/homebrew/opt/python@3.10/bin:$PATH"
fi

# Load API Keys from secure .env file
[ -f ~/.env ] && source ~/.env

# ============================================================
# STARSHIP PROMPT (Most popular prompt on Reddit)
# ============================================================
if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
else
    # Fallback to Oh My Zsh if Starship not installed
    export ZSH="$HOME/.oh-my-zsh"
    ZSH_THEME="robbyrussell"
    source $ZSH/oh-my-zsh.sh
fi

# ============================================================
# ZSH PLUGINS (Reddit favorites)
# ============================================================

# Install zinit if not present
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load essential plugins (most upvoted on Reddit)
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-history-substring-search
zinit light agkozak/zsh-z  # Smart directory jumping
zinit light hlissner/zsh-autopair  # Auto close quotes, brackets, etc.
zinit light zdharma-continuum/fast-syntax-highlighting

# ============================================================
# MODERN CLI TOOLS ALIASES (Reddit favorites)
# ============================================================

# Eza - modern replacement for ls (most loved)
if command -v eza &> /dev/null; then
    alias ls='eza --icons --group-directories-first'
    alias ll='eza -la --icons --group-directories-first --git'
    alias la='eza -a --icons --group-directories-first'
    alias lt='eza --tree --icons -a -I ".git|__pycache__|.mypy_cache|.ipynb_checkpoints"'
    alias ltt='eza --tree --icons -a -I ".git|__pycache__|.mypy_cache|.ipynb_checkpoints" -L 2'
    alias lttt='eza --tree --icons -a -I ".git|__pycache__|.mypy_cache|.ipynb_checkpoints" -L 3'
    alias l='eza -lbF --git --icons'
    alias llm='eza -lbGd --git --sort=modified --icons'
else
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
fi

# Bat - better cat with syntax highlighting
if command -v bat &> /dev/null; then
    export BAT_THEME="Dracula"
    alias cat='bat --style=plain --paging=never'
    alias catn='bat --style=numbers --paging=never'
    alias catf='bat --style=full'
    alias catp='bat'  # with paging
    
    # Use bat as man pager
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    export MANROFFOPT="-c"
fi

# Ripgrep - faster grep
if command -v rg &> /dev/null; then
    alias grep='rg'
    alias rgi='rg -i'  # case insensitive
    alias rgf='rg --files | rg'  # search filenames
    alias rgh='rg --hidden'  # include hidden files
fi

# fd - faster find
if command -v fd &> /dev/null; then
    alias find='fd'
    alias fdi='fd -i'  # case insensitive
    alias fdh='fd -H'  # include hidden
    alias fde='fd -e'  # by extension
fi

# Zoxide - smarter cd that learns your habits
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
    alias cd='z'
    alias cdi='zi'  # interactive selection
fi

# Delta - beautiful git diffs
if command -v delta &> /dev/null; then
    export GIT_PAGER='delta'
    export DELTA_FEATURES='+side-by-side line-numbers decorations'
    export DELTA_SYNTAX_THEME='Dracula'
fi

# Lazygit - terminal UI for git
if command -v lazygit &> /dev/null; then
    alias lg='lazygit'
    alias lgs='lazygit status'
    alias lgf='lazygit filter'
fi

# Btop - modern system monitor
if command -v btop &> /dev/null; then
    alias top='btop'
    alias htop='btop'
elif command -v htop &> /dev/null; then
    alias top='htop'
fi

# TLDR - community-driven man pages
if command -v tldr &> /dev/null; then
    alias help='tldr'
    alias man='tldr'
    alias mann='/usr/bin/man'  # original man
fi

# Other modern tools
alias df='duf' 2>/dev/null || alias df='df -h'
alias du='ncdu --color dark' 2>/dev/null || alias du='du -h'
alias ping='gping' 2>/dev/null || alias ping='ping'
alias dig='dog' 2>/dev/null || alias dig='dig'
alias ps='procs' 2>/dev/null || alias ps='ps'

# ============================================================
# FZF - The Ultimate Fuzzy Finder (Reddit's #1 productivity tool)
# ============================================================

if [ -f ~/.fzf.zsh ]; then
    source ~/.fzf.zsh
fi

if command -v fzf &> /dev/null; then
    # Enhanced FZF configuration
    export FZF_DEFAULT_OPTS='
      --height 60%
      --layout=reverse
      --border=rounded
      --info=inline
      --multi
      --preview-window=:hidden
      --preview "([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (eza --tree --icons --color=always {} | head -200)) || echo {} 2> /dev/null | head -200"
      --bind "ctrl-/:toggle-preview"
      --bind "ctrl-a:select-all"
      --bind "ctrl-y:execute-silent(echo {+} | pbcopy)"
      --bind "ctrl-e:execute(echo {+} | xargs -o vim)"
      --color=bg+:#293739,bg:#1B1D1E,spinner:#E85D75,hl:#7AA2A5
      --color=fg:#D4D4D4,header:#7AA2A5,info:#81A1C1,pointer:#E85D75
      --color=marker:#E85D75,fg+:#D4D4D4,prompt:#81A1C1,hl+:#7AA2A5
    '
    
    # Use fd for file search if available
    if command -v fd &> /dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
        
        # Advanced file search
        _fzf_compgen_path() {
            fd --hidden --follow --exclude ".git" . "$1"
        }
        _fzf_compgen_dir() {
            fd --type d --hidden --follow --exclude ".git" . "$1"
        }
    fi
    
    # Enhanced FZF functions
    
    # Interactive cd with preview
    fcd() {
        local dir
        dir=$(fd --type d --hidden --follow --exclude .git 2> /dev/null | fzf --preview 'eza --tree --icons --color=always {} | head -200') && cd "$dir"
    }
    
    # Kill process interactively
    fkill() {
        local pid
        pid=$(procs | sed 1d | fzf -m --header='[kill process]' | awk '{print $1}')
        if [ "x$pid" != "x" ]; then
            echo $pid | xargs kill -${1:-9}
        fi
    }
    
    # Git branch with preview
    fbr() {
        local branches branch
        branches=$(git --no-pager branch -vv) &&
        branch=$(echo "$branches" | fzf +m --preview 'git log --oneline --graph --color=always $(echo {} | awk "{print \$1}")') &&
        git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
    }
    
    # Git commit browser
    fshow() {
        git log --graph --color=always \
            --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
        fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
            --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
    FZF-EOF"
    }
    
    # Search history
    fh() {
        print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
    }
    
    # Docker container management
    if command -v docker &> /dev/null; then
        # Select container
        fdoc() {
            local cid
            cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')
            [ -n "$cid" ] && docker start "$cid" && docker logs -f "$cid"
        }
        
        # Remove Docker images
        fdocri() {
            docker images | sed 1d | fzf -m | awk '{print $3}' | xargs -r docker rmi
        }
    fi
    
    # Search and edit with vim
    fe() {
        local files
        IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
        [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
    }
    
    # Interactive ripgrep
    frg() {
        local selected
        selected=$(
            rg --color=always --line-number --no-heading --smart-case "${*:-}" |
            fzf --ansi \
                --color "hl:-1:underline,hl+:-1:underline:reverse" \
                --delimiter : \
                --preview 'bat --color=always {1} --highlight-line {2}' \
                --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
        )
        [ -n "$selected" ] && ${EDITOR:-vim} $(echo "$selected" | cut -d: -f1) +$(echo "$selected" | cut -d: -f2)
    }
fi

# ============================================================
# ZSH OPTIONS & SETTINGS
# ============================================================

# History settings (optimized for searching)
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt EXTENDED_HISTORY          # Write timestamp to history
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicates first
setopt HIST_IGNORE_DUPS          # Ignore duplicates
setopt HIST_IGNORE_ALL_DUPS      # Remove old duplicates
setopt HIST_FIND_NO_DUPS         # No display duplicates
setopt HIST_SAVE_NO_DUPS         # No write duplicates
setopt SHARE_HISTORY             # Share history between sessions
setopt INC_APPEND_HISTORY        # Add commands immediately
setopt HIST_REDUCE_BLANKS        # Remove blanks
setopt HIST_VERIFY               # Verify history expansion

# Directory navigation
setopt AUTO_CD                   # cd by typing directory name
setopt AUTO_PUSHD                # Push directories on every cd
setopt PUSHD_IGNORE_DUPS         # No duplicates in dir stack
setopt PUSHD_SILENT              # No dir stack after pushd/popd
setopt PUSHD_TO_HOME             # Push to home when no args
setopt CDABLE_VARS               # cd to variable values
setopt EXTENDED_GLOB             # Extended globbing

# Completion settings
setopt COMPLETE_IN_WORD          # Complete from cursor position
setopt ALWAYS_TO_END             # Move cursor to end after completion
setopt PATH_DIRS                 # Path search for completion
setopt AUTO_MENU                 # Show completion menu
setopt AUTO_LIST                 # List choices on ambiguous completion
setopt AUTO_PARAM_SLASH          # Add slash to directory names
setopt MENU_COMPLETE             # Cycle through completions

# Better completion styling
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Faster completion
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# ============================================================
# KEY BINDINGS (Reddit favorites)
# ============================================================

# Enable vim mode
bindkey -v
export KEYTIMEOUT=1

# Better vim mode indicators
function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
        echo -ne '\e[1 q'
    elif [[ ${KEYMAP} == main ]] || [[ ${KEYMAP} == viins ]] || [[ ${KEYMAP} = '' ]] || [[ $1 = 'beam' ]]; then
        echo -ne '\e[5 q'
    fi
}
zle -N zle-keymap-select

# History substring search bindings
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Autosuggestions bindings
bindkey '^ ' autosuggest-accept  # Ctrl+Space
bindkey '^[[Z' autosuggest-accept  # Shift+Tab
bindkey '^[^M' autosuggest-execute  # Alt+Enter

# Edit command in editor
autoload -z edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# Quick directory navigation
bindkey -s '^o' 'fcd\n'  # Ctrl+O for fuzzy cd
bindkey -s '^r' 'fh\n'   # Ctrl+R for fuzzy history
bindkey -s '^f' 'fe\n'   # Ctrl+F for fuzzy edit

# ============================================================
# ALIASES (Combined Reddit favorites + your custom ones)
# ============================================================

# Quick directory access
alias desk='cd ~/Desktop'
alias dl='cd ~/Downloads'
alias docs='cd ~/Documents'
alias proj='cd ~/Desktop/Projects'
alias areas='cd ~/Desktop/Areas'
alias res='cd ~/Desktop/Resources'
alias arch='cd ~/Desktop/Archive'

# Git aliases (Reddit's most used)
alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit -v'
alias gcm='git commit -m'
alias gco='git checkout'
alias gd='git diff'
alias gds='git diff --staged'
alias gf='git fetch'
alias gl='git pull'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias gp='git push'
alias gst='git status'
alias gsb='git status -sb'

# Enhanced file operations
alias ll='ls -lah'
alias lt='ls -lhat | head -20'  # Latest modified files
alias tree='tree -I "node_modules|__pycache__|.git"'

# System shortcuts
alias myip='curl -s ifconfig.me'
alias localip='ipconfig getifaddr en0 2>/dev/null || hostname -I | awk "{print \$1}"'
alias ports='netstat -tlnp 2>/dev/null || sudo lsof -iTCP -sTCP:LISTEN -n -P'
alias path='echo -e ${PATH//:/\\n}'
alias reload='source ~/.zshrc'

# Docker aliases (if installed)
if command -v docker &> /dev/null; then
    alias d='docker'
    alias dc='docker compose'
    alias dps='docker ps'
    alias dpsa='docker ps -a'
    alias dimg='docker images'
    alias dexec='docker exec -it'
    alias dlogs='docker logs -f'
    alias dprune='docker system prune -af'
fi

# Python/Node development
alias py='python3'
alias pip='pip3'
alias pyvenv='python3 -m venv venv && source venv/bin/activate'
alias npmr='npm run'
alias npmd='npm run dev'
alias npmt='npm test'
alias y='yarn'
alias p='pnpm'

# Quick edit configs
alias zshrc='${EDITOR:-vim} ~/.zshrc'
alias tmuxconf='${EDITOR:-vim} ~/.tmux.conf'
alias vimrc='${EDITOR:-vim} ~/.vimrc'
alias sshconf='${EDITOR:-vim} ~/.ssh/config'

# ============================================================
# YOUR CUSTOM CONFIGURATIONS (Preserved)
# ============================================================

# Auto-start tmux on SSH sessions (but not for VS Code)
if [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]] && [[ ! "$TERM_PROGRAM" = "vscode" ]] && [[ -z "$TMUX" ]]; then
    if [[ -z "$VSCODE_INJECTION" ]] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
        tmux attach-session -t main 2>/dev/null || tmux new-session -s main
    fi
fi

# SSH with auto tmux
alias oracle='ssh -t oracle'
alias oracle1='ssh oracle1 -t "tmux new-session -A -s main"'
alias oracle2='ssh oracle2 -t "tmux new-session -A -s main"'
alias evertz='ssh -t evertz'

# Projects with tmux
alias zgdk='ssh oracle -t "tmux new-session -A -s zgdk -c ~/Projects/zgdk"'
alias boht='ssh oracle -t "tmux new-session -A -s boht -c ~/Projects/bohtPY"'
alias golem='ssh oracle -t "tmux new-session -A -s golem -c ~/Projects/gollm"'

# Tmux shortcuts
alias ta='tmux attach -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias tk='tmux kill-session -t'
alias tmuxkillall='tmux kill-server'

# Sync dotfiles
alias dotsync='~/sync-dotfiles.sh'
alias dotsync-all='~/sync-dotfiles.sh all'
alias dotsync-pull='~/sync-dotfiles.sh pull'

# ============================================================
# FUNCTIONS (Reddit's most useful)
# ============================================================

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Quick backup with timestamp
backup() {
    cp "$1" "$1.backup-$(date +%Y%m%d-%H%M%S)"
}

# Extract any archive
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Quick server
serve() {
    local port="${1:-8000}"
    python3 -m http.server "$port"
}

# Weather
weather() {
    curl -s "wttr.in/${1:-}"
}

# Cheatsheet
cheat() {
    curl -s "cheat.sh/$1"
}

# ============================================================
# DEVELOPMENT ENVIRONMENT
# ============================================================

# Pyenv initialization
if command -v pyenv &> /dev/null; then
    eval "$(pyenv init -)"
fi

# NVM lazy loading for faster startup
if [ -s "$HOME/.nvm/nvm.sh" ]; then
    export NVM_DIR="$HOME/.nvm"
    alias nvm='unalias nvm; source "$NVM_DIR/nvm.sh"; nvm'
    alias node='unalias node; source "$NVM_DIR/nvm.sh"; node'
    alias npm='unalias npm; source "$NVM_DIR/nvm.sh"; npm'
fi

# Rust
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Go
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

# ============================================================
# PERFORMANCE OPTIMIZATIONS
# ============================================================

# Compile completions for faster loading
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# Load local config if exists
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# ============================================================
# STARTUP DISPLAY
# ============================================================

# Show system info on startup (can be disabled)
if command -v fastfetch &> /dev/null; then
    fastfetch
elif command -v neofetch &> /dev/null; then
    neofetch --disable gpu --colors 4 4 4 4 4 4 --ascii_colors 4 4
fi

# Quick help
alias help='echo "
Quick Commands:
  fcd     - fuzzy cd with preview
  fe      - fuzzy edit files
  fkill   - fuzzy kill process
  fbr     - fuzzy git branch
  fshow   - fuzzy git commits
  frg     - fuzzy ripgrep
  lg      - lazygit
  z/zi    - smart cd/interactive
  
Modern Tools:
  eza     - better ls
  bat     - better cat
  rg      - better grep
  fd      - better find
  delta   - better git diff
  btop    - better top
  tldr    - better man
"'