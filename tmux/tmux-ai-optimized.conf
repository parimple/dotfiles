# Claude Code AI-Optimized tmux Configuration
# Based on 2025 research for AI pair programming
# =============================================

# Basic settings
set -g default-terminal "screen-256color"
set -ag terminal-overrides ",xterm-256color:RGB"
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on

# Prefix key (Ctrl-a like screen)
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# ==========================================
# AI-OPTIMIZED CLIPBOARD INTEGRATION
# ==========================================
# Enhanced clipboard support for Claude
set -g set-clipboard on
set -as terminal-features ',*:clipboard'

# Platform-specific clipboard
if-shell 'test "$(uname)" = "Darwin"' '
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
' '
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
'

# ==========================================
# SESSION PERSISTENCE FOR LONG AI SESSIONS
# ==========================================
set -g history-limit 50000
set -g history-file ~/.tmux_history

# Automatic session saving for context preservation
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '15'

# ==========================================
# AI WORKFLOW OPTIMIZATIONS
# ==========================================
# Quick pane for AI assistance
bind a split-window -h -l 40% 'tmuxai --watch'
bind A new-window -n 'AI' 'tmuxai --watch'

# Logging for AI context
bind L pipe-pane -o 'cat >> ~/tmux-logs/#S-#W-%Y%m%d-%H%M%S.log' \; display "Logging to ~/tmux-logs/#S-#W.log"
bind l pipe-pane \; display "Logging stopped"

# Quick context capture
bind C capture-pane -S -50000 \; save-buffer ~/tmux-context.txt \; display "Context saved"

# ==========================================
# CLEAN STATUS BAR FOR AI READABILITY
# ==========================================
set -g status on
set -g status-interval 5
set -g status-position bottom
set -g status-style 'bg=colour234 fg=colour137'

# Minimal left status
set -g status-left '#[fg=colour245,bg=colour234] #S '
set -g status-left-length 20

# Minimal right status with logging indicator
set -g status-right '#{?pipe_pane,üìù ,}#[fg=colour245,bg=colour234] %H:%M '
set -g status-right-length 20

# Clean window status
setw -g window-status-format ' #I:#W '
setw -g window-status-current-format ' #I:#W* '

# ==========================================
# PANE MANAGEMENT FOR AI WORKFLOWS
# ==========================================
# Smart pane splitting with current path
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Quick pane navigation (no prefix)
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Pane resizing for AI visibility
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# ==========================================
# WINDOW NAVIGATION OPTIMIZED
# ==========================================
# Direct window access (no prefix)
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5

# Quick window switching
bind -n M-[ previous-window
bind -n M-] next-window
bind -n M-Tab last-window

# ==========================================
# COPY MODE ENHANCEMENTS
# ==========================================
setw -g mode-keys vi
bind -n C-[ copy-mode

# Better search in copy mode
bind-key -T copy-mode-vi / command-prompt -i -p "search:" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search:" "send -X search-backward-incremental \"%%%\""

# Quick selection
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
bind-key -T copy-mode-vi C-v send -X rectangle-toggle

# ==========================================
# MOUSE SUPPORT (OFF by default for copying)
# ==========================================
set -g mouse off
bind m set -g mouse on \; display 'Mouse: ON (scrolling enabled)'
bind M set -g mouse off \; display 'Mouse: OFF (selection enabled)'

# ==========================================
# PERFORMANCE OPTIMIZATIONS
# ==========================================
set -sg escape-time 0
set -g focus-events on
setw -g aggressive-resize on

# ==========================================
# AI-SPECIFIC KEY BINDINGS
# ==========================================
# Quick commands for Claude workflows
bind c new-window -c "#{pane_current_path}" -n "code"
bind g new-window -c "#{pane_current_path}" -n "git" "lazygit"
bind t new-window -c "#{pane_current_path}" -n "test"

# Project-specific windows
bind P command-prompt -p "Project path:" "new-window -c '%1' -n '#{b:%1}'"

# Quick reload
bind r source-file ~/.tmux.conf \; display "Config reloaded!"

# ==========================================
# HOOKS FOR AUTOMATION
# ==========================================
# Auto-rename windows based on current command
set-hook -g after-new-window 'rename-window "#{b:pane_current_path}"'

# Alert on long-running commands
set-hook -g alert-activity 'display-message "Activity in window #{window_index}"'

# ==========================================
# MINIMAL PLUGINS FOR PERFORMANCE
# ==========================================
# Only essential plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Initialize TPM (keep at bottom)
run '~/.tmux/plugins/tpm/tpm'